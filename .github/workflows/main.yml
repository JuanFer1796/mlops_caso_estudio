name: Predict Marathon Time

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  predict:
    runs-on: ubuntu-latest

    steps:
    - name: Check out repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Prediction
      run: |
        python -c "
import joblib
import pandas as pd

# Cargar el modelo y el escalador
model = joblib.load('ridge_model.joblib')
scaler = joblib.load('scaler.joblib')

# Diccionario de mapeo para RunType
runtype_mapping = {'Outdoor': 0, 'Track': 1, 'Trail': 2, 'Treadmill': 3}

def predict_marathon_time(input_data):
    input_df = pd.DataFrame([input_data])
    input_df['RunType'] = input_df['RunType'].map(runtype_mapping)
    input_df['CrossTraining'] = input_df['CrossTraining'].str.extract(r'(\d+)').astype(float).fillna(0)
    
    if 'GENDER' in input_df.columns:
        input_df = pd.get_dummies(input_df, columns=['GENDER'], drop_first=True)
    if 'Category' in input_df.columns:
        input_df = pd.get_dummies(input_df, columns=['Category'], drop_first=True)

    # Asignar columnas de entrenamiento
    input_df = input_df.reindex(columns=model_columns, fill_value=0)
    input_scaled = scaler.transform(input_df)
    prediction = model.predict(input_scaled)
    return prediction[0]

# Ejemplo de entrada
sample_input = {
    'AGE': 30,
    'RunType': 'Outdoor',
    'SubTime': 1.0,
    'SubDistance': 10.0,
    'Wall21': 1.5,
    'km4week': 50.0,
    'sp4week': 12.0,
    'CrossTraining': '5h',
    'Wall21_Marathon': 1.2,
    'PRECIP_mm': 0,
    'SUNSHINE_hrs': 5,
    'CLOUD_hrs': 3,
    'ATMOS_PRESS_mbar': 1013,
    'AVG_TEMP_C': 15,
    'MAX_TEMP_C': 20,
    'MIN_TEMP_C': 10,
}

# Hacer predicci√≥n
print(f'Predicted Marathon Time: {predict_marathon_time(sample_input)}')
        "
